name: CI/CD with Docker

on:
  push:
    branches:
      - master

env:
  DOCKERHUB_USER: rudenkovladimir
  DOCKERHUB_REPOSITORY: kanban-board-backend

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      base_image_name: ${{ steps.create_environment_variables.outputs.base_image_name }}
    steps:
      - name: Create environment variables
        id: create_environment_variables
        run: echo "base_image_name=$DOCKERHUB_USER/$DOCKERHUB_REPOSITORY" >> "$GITHUB_OUTPUT"

  run-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Grant permission to gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Run Spotless
        run: ./gradlew spotlessCheck

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: [ setup, run-tests ]
    if: success()
    outputs:
      actual_image_name: ${{ steps.set_full_image_name.outputs.actual_image_name }}
      image_tag: ${{ steps.set_image_tag_from_commit.outputs.image_tag }}
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u $DOCKERHUB_USER --password-stdin

      # need to add a tag to image to not cause name collisions on dockerhub when pushing
      - name: Set image tag from commit
        id: set_image_tag_from_commit
        run: echo "image_tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Set full image name
        id: set_full_image_name
        run: echo "actual_image_name=${{needs.setup.outputs.base_image_name}}:${{ steps.set_image_tag_from_commit.outputs.image_tag }}" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        run: docker build -t ${{ steps.set_full_image_name.outputs.actual_image_name }} .

      - name: Push Docker image
        run: docker push ${{ steps.set_full_image_name.outputs.actual_image_name }}

  deploy-to-ec2:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      #          1. install docker if not installed; 2. stop old container, start a new one using new image
      - name: Deploy on EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
             if ! command -v docker &> /dev/null; then
               echo "Docker not found. Installing..."
               sudo apt update
               sudo apt install -y docker.io
               sudo systemctl enable docker
               sudo systemctl start docker
               sudo usermod -aG docker $(whoami)
               newgrp docker
             else
               echo "Docker is already installed."
             fi

            sudo docker pull ${{ needs.build-and-push-docker-image.outputs.actual_image_name }}
            sudo docker stop myapp || true
            sudo docker rm myapp || true
            sudo docker run -d --name myapp -p 80:8080 \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASS=${{ secrets.DB_PASS }} \
            ${{ needs.build-and-push-docker-image.outputs.actual_image_name }}
            sudo docker image prune -af
          EOF

  cleanup-old-images:
    runs-on: ubuntu-latest
    needs: [ deploy-to-ec2, build-and-push-docker-image, setup ]
    if: success()
    steps:
      # we need to do that because we only want to have a single active prod deployment for that project
      - name: Delete old Docker Hub images
        run: |
          # Get list of all tags
          TAGS=$(curl -s -u "$DOCKERHUB_USER:${{ secrets.DOCKERHUB_TOKEN }}" \
            "https://hub.docker.com/v2/repositories/${{ needs.setup.outputs.base_image_name }}/tags/" \
            | jq -r '.results[].name')

          # Delete all tags except the current one
          for TAG in $TAGS; do
            if [ "$TAG" != "${{ needs.build-and-push-docker-image.outputs.image_tag }}" ]; then
              echo "Deleting tag: $TAG"
              curl -s -X DELETE -u "$DOCKERHUB_USER:${{ secrets.DOCKERHUB_TOKEN }}" \
                "https://hub.docker.com/v2/repositories/$DOCKERHUB_USER/tags/$TAG/"
            fi
          done

  # if deployment failed, we need to cleanup the image we pushed, because it won't be used
  cleanup-unused-image:
    runs-on: ubuntu-latest
    needs: [ deploy-to-ec2, build-and-push-docker-image, setup ]
    if: failure()
    steps:
      - name: Remove just-pushed image
        run: |
          echo "Deleting failed tag: ${{ needs.build-and-push-docker-image.outputs.image_tag }}"
          TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ needs.setup.outputs.base_image_name }}:pull,push" \
            | jq -r .token)
          DIGEST=$(curl -sI \
            -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
            -H "Authorization: Bearer $TOKEN" \
            "https://registry-1.docker.io/v2/${{ needs.setup.outputs.base_image_name }}/manifests/${{ needs.build-and-push-docker-image.outputs.image_tag }}" \
            | awk '/Docker-Content-Digest/ {print $2}' | tr -d $'\r')
          curl -s -X DELETE \
            -H "Authorization: Bearer $TOKEN" \